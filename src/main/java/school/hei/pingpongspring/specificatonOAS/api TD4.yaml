openapi: 3.1.0
info:
  title: Restaurant Management API - 2025 TD4
  description: Restaurant Management API - 2025 TD4
  version: 1.0.0

servers:
  - url: 'https://localhost:8080'

paths:
  /ingredients:
    get:
      summary: Get list of ingredients
      description: List of all ingredients, with optional filtering by price range
      parameters:
        - name: priceMinFilter
          in: query
          required: false
          schema:
            type: number
            format: double
          description: Minimum price to filter ingredients
        - name: priceMaxFilter
          in: query
          required: false
          schema:
            type: number
            format: double
          description: Maximum price to filter ingredients
      responses:
        '200':
          description: List of filtered ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        '400':
          description: Bad request (e.g. invalid filter)
          content:
            application/json:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: string

  /ingredients/{id}:
    get:
      summary: Get ingredient by ID
      parameters:
        - $ref: '#/components/parameters/IngredientIdentifier'
      responses:
        200:
          description: A single ingredient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'

  /ingredients/{id}/prices:
    put:
      summary: Add new prices to a specific ingredient
      parameters:
        - $ref: '#/components/parameters/IngredientIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Price'
      responses:
        200:
          description: The specific ingredient with updated price history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'

  /ingredients/{id}/stockMovements:
    put:
      summary: Add new stock movements to a specific ingredient
      parameters:
        - $ref: '#/components/parameters/IngredientIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StockMovement'
      responses:
        200:
          description: The specific ingredient with updated stockMovement history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'

  /dishes:
    get:
      summary: Get dishes
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        200:
          description: List of dishes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'

components:
  parameters:
    IngredientIdentifier:
      in: path
      name: id
      schema:
        type: integer
      required: false

    Page:
      in: query
      name: page
      schema:
        type: integer
        default: 1

    PageSize:
      in: query
      name: pageSize
      schema:
        type: integer
        default: 10

  schemas:
    Dish:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: integer
        grossMargin:
          type: number
          format: float
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'

    Ingredient:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        dateTime:
          type: string
          format: date-time
        unit:
          $ref: '#/components/schemas/Unit'
        prices:
          type: array
          items:
            $ref: '#/components/schemas/Price'
        stockMovements:
          type: array
          items:
            $ref: '#/components/schemas/StockMovement'

    Price:
      type: object
      properties:
        id:
          type: integer
          format: int64
        ingredientId:
          type: integer
          format: int64
        price:
          type: number
          format: float
        date:
          type: string
          format: date-time

    StockMovement:
      type: object
      properties:
        id:
          type: integer
          format: int64
        ingredientId:
          type: integer
          format: int64
        quantity:
          type: number
          format: float
        unit:
          $ref: '#/components/schemas/Unit'
        type:
          $ref: '#/components/schemas/StockMovementType'
        date:
          type: string
          format: date-time

    StockMovementType:
      type: string
      enum:
        - IN
        - OUT

    Unit:
      type: string
      enum:
        - G
        - U
        - L
